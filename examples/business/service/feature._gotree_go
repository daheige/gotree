package service

import (
	"examples/protocol/dao_cmd"

	"github.com/8treenet/gotree/helper"

	"github.com/8treenet/gotree/business"
)

func init() {
	business.RegisterService(new(Feature).Gotree())
}

type Feature struct {
	business.BusinessService
}

// Gotree
func (self *Feature) Gotree() *Feature {
	self.BusinessService.Gotree(self)
	return self
}

// Course
func (self *Feature) Course() {
	cmd := new(dao_cmd.Course).Gotree("ServiceFeature", 666)
	if err := self.CallDao(cmd, &helper.VoidValue{}); err != nil {
		helper.Log().WriteWarn(err)
	}
}

// Simple 简单的helper工具类使用示例
func (self *Feature) Simple() (result []struct {
	Id    int
	Value string
	Pos   float64
}, e error) {
	var newFeatures []struct {
		Id    int
		Value string
	}

	//反射创造一个长度为2的匿名数组
	if e = helper.NewSlice(&newFeatures, 2); e != nil {
		return
	}
	for index := 0; index < len(newFeatures); index++ {
		newFeatures[index].Id = index + 1
		newFeatures[index].Value = "hello"
	}

	//拷贝内存到 result，因为 newFeatures 没有Pos字段，故result.Pos默认0
	if e = helper.Memcpy(&result, newFeatures); e != nil {
		return
	}

	//反射升序排序
	helper.SliceSortReverse(&result, "Id")
	//反射降序排序
	helper.SliceSort(&result, "Id")
	return
}
